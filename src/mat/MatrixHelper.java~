package mat;

public class MatrixHelper {

	public static int changeSign(int x) {
		if (x % 2 == 0)
			return 1;
		else
			return -1;
	}		

	public static Matrix transpose(Matrix matrix) {
	   	Matrix transposedMatrix = new Matrix(matrix.getNcols(), matrix.getNrows());
    	for (int i=0;i<matrix.getNrows();i++) {
	        for (int j=0;j<matrix.getNcols();j++) {
	            transposedMatrix.setValueAt(j, i, matrix.getValueAt(i, j));
	        }
	    }
    	return transposedMatrix;
	} 

	public static double determinant(Matrix matrix){
    	if (!matrix.isSquare()) {
        	System.out.println("matrix need to be square.");
		}
    	if (matrix.size() == 1) {
			return matrix.getValueAt(0, 0);
    	}
    	if (matrix.size()==2) {
        	return (matrix.getValueAt(0, 0) * matrix.getValueAt(1, 1)) - 
        			(matrix.getValueAt(0, 1) * matrix.getValueAt(1, 0));
    	}
    
		double sum = 0.0;
    	for (int i=0; i<matrix.getNcols(); i++) {
        	sum += changeSign(i) * matrix.getValueAt(0, i) * 
        			determinant(createSubMatrix(matrix, 0, i));
    	}
    	return sum;
	}

	public static Matrix createSubMatrix(Matrix matrix, int excluding_row, 
										 int excluding_col) {
    	Matrix mat = new Matrix(matrix.getNrows()-1, matrix.getNcols()-1);
    	int r = -1;
    	for (int i=0;i<matrix.getNrows();i++) {
        	if (i==excluding_row) {
        	    continue;
			}
            r++;
            int c = -1;
        	for (int j=0;j<matrix.getNcols();j++) {
            	if (j==excluding_col) {
	                continue;
				}		
            	mat.setValueAt(r, ++c, matrix.getValueAt(i, j));
        	}
    	}

    	return mat;
	}	

	public static Matrix cofactor(Matrix matrix) {
    	Matrix mat = new Matrix(matrix.getNrows(), matrix.getNcols());
    	for (int i=0;i<matrix.getNrows();i++) {
        	for (int j=0; j<matrix.getNcols();j++) {
        	    mat.setValueAt(i, j, changeSign(i) * changeSign(j) * 
        	    determinant(createSubMatrix(matrix, i, j)));
        	}
    	}
    
    	return mat;
	}

	public static Matrix inverse(Matrix matrix) {
	    return (transpose(cofactor(matrix)).multiplyByConstant(
	    		1.0/determinant(matrix)));
	}
	
	//m1 to left m2 to the right i.e m1 x m2
	public static Matrix multiply (Matrix m1, Matrix m2) {
		Matrix ret;
		ret = new Matrix(1, 1);
		if (m1.getNcols() == m2.getNrows()) {
			ret = new Matrix(m1.getNrows(), m2.getNcols());
			
			int i, j, k;
			for (i = 0; i < ret.getNrows(); i++) {
				for  (j = 0; j < ret.getNcols(); j++) {
					for (k = 0; k < m1.getNcols(); k++) {
						ret.setValueAt(i, j, ret.getValueAt(i, j) + 
						m1.getValueAt(i, k) * m2.getValueAt(k, j));
					}
				}
			}		
		}
		
		else {
			System.out.println("Cannot multiply size mismatch.");		
		}		
		return ret;
	}
	
}
